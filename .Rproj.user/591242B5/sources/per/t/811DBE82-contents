---
title: "Writing Seminar: Orientation, May 2024"
author: Macartan Humphreys
format:
  revealjs: 
    theme: moon
    highlight: tango
    transition: slide
    embed-resources: true
---
# Today

```{r, message = FALSE, echo = FALSE}
library(DeclareDesign)
library(DesignLibrary)
library(knitr)
library(tidyverse)
library(kableExtra)
library(CausalQueries)
run <- FALSE
```


* General aims and structure
* Expectations
* Pointers for coding
* Topics / refreshers
  * Papers: structures and processes
  * DAGs, variables, identification strategies
  * Designs and design diagnosis


# General aims and structure

## Aims

* Write a paper
* Follow open science principle


## Some readings {.smaller}


Many have found the resources below useful.

  *  King, Gary, Robert O. Keohane, and Sidney Verba. Designing social inquiry: Scientific inference in qualitative research. Princeton University Press, 1994.
  *  Gerring, John. Case Study Research: Principles and Practice.  New York:  Cambridge University Press, 2007.
  *  Lipson, Charles. How to Write a B.A. Thesis: A Practical Guide From Your First Ideas to Your Finished Paper (Chicago:  The University of Chicago Press, 2005).
  *  Van Evera, Stephen. Guide to Methods for Students of Political Science (Ithaca: Cornell UP, 1997).

Writing. People quibble but there is a lot of wisdom in this little book:

  *  Strunk, William.The elements of style. Penguin, 2007.



# Expectations

## Expectations {.smaller}


1. Introduction
    1. Task: Describe the design informally in MIDA terms
    2. Task: Identify relevant literature and a model article
2. Design
   1. Task: Read one piece from relevant literature of at least 2 classmates 
   2. Task: Formally "declare" the design, present the declaration
   3. Task: Situate the contribution, present the contribution
3. Writing from inside out
   1. Task: *Before class*: Only if relevant for your project: register the design before implementing analysis. This is not relevant if you have already implemented analysis. 
   2. Task: *Before class*: Share abstract, introduction, and paper outline, identifying any additional analyses
   3. Task: *In class*: Present *Main Results*, table or figure
5. Draft 1 shared and discussed
   1. Task: *Before class*: Share draft 1
   2. Task: Read draft of at least 2 classmates 
6. Final class presentations
   1. Task: Incorporate comments, complete a draft
   2. Task: Present in class using slides   



# Topics 1:  Papers

## Classic paper structure

https://macartan.github.io/teaching/how-to-write

Classic structure

1. Motivation
2. Theory
3. Strategy (perhaps descriptives here)
4. Main results
5. Disucission / deepening
6. Conclusion

## Classic paper stages


## Design form





# Models: Arguments as DAGs 

```{r child="modules/_an_argument.Rmd", echo=FALSE}
```
   



# Design declaration and diagnosis

[book](https://book.declaredesign.org/): [https://book.declaredesign.org/](https://book.declaredesign.org/)

## The MIDA Framework

Q: Is my research design good?

A: Well let's simulate it to see how it performs.

Q: What should I put in the simulation?

A: All elements of a research design.

Q: What are the elements of a research design?

A: M! I! D! A!

## Four elements of any research design

- **Model**: set of models of what causes what and how
- **Inquiry**: a question stated in terms of the model
- **Data strategy**: the set of procedures we use to gather information from the world (sampling, assignment, measurement)
- **Answer strategy**: how we summarize the data produced by the data strategy

## Four elements of any research design

```{r midaplot, echo = FALSE}
knitr::include_graphics("midadag.svg")
```


# Examples of MIDA elements

* `M`: DAGs, game theoretic models
* `I`: ATEs, CATEs, COEs, models
* `D`: Sampling schemes, assignment schemes, text analysis, interview
* `A`: Experiment, observational, quantitative, qualitative:
   * Conditioning on observables
   * Difference in differences
   * RDD
   * Instrumental variables


# Declaration, Diagnosis, Redesign cycle


* **Declaration**: Telling the computer what M, I, D, and A are.

* **Diagnosis**: Estimating "diagnosands" like power, bias, rmse, error rates, ethical harm, amount learned.

* **Redesign** : Fine-tuning features of the data and answer strategies to understand how they change the diagnosands

* Different sample sizes
* Different randomization procedures
* Different estimation strategies
* Implementation: effort into compliance versus more effort into sample size



## In code: Key commands for making a design

* `declare_model()`
* `declare_inquiry()`
* `declare_assignment()`
* `declare_measurement()`
* `declare_inquiry`
* `declare_estimator()`

and there are more `declare_` functions!

## In code:  Key commands for using a design

* `draw_data(design)`
* `draw_estimands(design)`
* `draw_estimates(design)`
* `get_estimates(design, data)`
* `run_design(design)`, `simulate_design(design)`
* `diagnose_design(design)`
* `redesign(design, N = 200)`
* `design |> redesign(N = c(200, 400)) |>` 
     `diagnose_designs()` 
* `compare_designs()`, `compare_diagnoses()`

## Cheat sheet

<font size="3">https://raw.githubusercontent.com/rstudio/cheatsheets/master/declaredesign.pdf</font>


```{r, echo = FALSE}
knitr::include_graphics("cheat_sheet.png") 
```

## A simple design

```{r, comment = "", echo = TRUE}

N <- 100
b <- .5

design <- 
  declare_model(N = N, U = rnorm(N), 
                potential_outcomes(Y ~ b * Z + U)) + 
  declare_assignment(Z = simple_ra(N), Y = reveal_outcomes(Y ~ Z)) + 
  declare_inquiry(ate = mean(Y_Z_1 - Y_Z_0)) + 
  declare_estimator(Y ~ Z, inquiry = "ate", .method = lm_robust)

```

You now have a two arm design object in memory!

If you just type `design` it will *run* the design---a good check to make sure the design has been declared properly.


## Make data from the design

```{r, echo = TRUE}
data <- draw_data(design)

data |> head () |> kable()
```


## Draw estimands


```{r, comment = "", echo = TRUE}

draw_estimands(design) |>
  kable(digits = 2)

```

## Draw estimates


```{r, comment = "", echo = TRUE}

draw_estimates(design) |> 
  kable(digits = 2) 

```


## Get estimates

```{r, comment = "", echo = TRUE}

get_estimates(design, data) |>
  kable(digits = 2)

```

## Simulate design

```{r, comment = "", warning = FALSE, echo = TRUE}

simulate_design(design, sims = 3) |>
  kable(digits = 2)

```

## Diagnose design

```{r, eval = FALSE, message = FALSE, echo = TRUE}

design |> 
  diagnose_design(sims = 100) 

```
```{r, echo = FALSE, message = FALSE}

design |> 
  diagnose_design(sims = 100) |>
  reshape_diagnosis() |>
  select("Mean Estimate", "Bias", "SD Estimate", "RMSE", "Power", "Coverage" ) |>
  kable(digits = 2) 

```

## Redesign

```{r, comment = "", message = FALSE, echo = TRUE}

new_design <-
  
  design |> redesign(b = 0)

```

* Modify any arguments that are explicitly called on by design steps.
* Or add, remove, or replace steps


## Compare designs

```{r, eval = FALSE, echo = TRUE}
redesign(design, N = 50) %>%
  
  compare_diagnoses(design) 

```


```{r, echo = FALSE}
if(run)
redesign(design, N = 50) %>%
  compare_diagnoses(design)  %>%
  write_rds("saved/compare_diagnoses.rds")

  read_rds("saved/compare_diagnoses.rds")$compared_diagnoses_df |>
    select(-design_1, -design_2, -inquiry, -estimator, -term, -se_1, -se_2, -se_difference,
           -sims, -bootstrap_sims) |>
    kable(digits = 2)

```





# Topics 3: Pointers for coding

You should generate your replication files at the same time as your analysis


## How to: Replication files

* Best in self-contained documents for easy third party viewing. e.g. `.html` via `.qmd` or `.Rmd`

Some examples:

* [https://macartan.github.io/projects/replications/](https://macartan.github.io/projects/replications/)
* [https://wzb-ipi.github.io/vaccine_freedoms/](https://wzb-ipi.github.io/vaccine_freedoms/)


## Good coding rules 

* [https://bookdown.org/content/d1e53ac9-28ce-472f-bc2c-f499f18264a3/code.html](https://bookdown.org/content/d1e53ac9-28ce-472f-bc2c-f499f18264a3/code.html)
* [https://www.r-bloggers.com/2018/09/r-code-best-practices/](https://www.r-bloggers.com/2018/09/r-code-best-practices/)

## Good coding rules 

* Metadata first
* Call packages at the beginning: use `pacman` 
* Put options at the top
* Call all data files once, at the top. Best to call directly from a public archive, when possible.  
* Use functions and define them at the top: comment them; useful sometimes to illustrate what they do
* Replicate first, re-analyze second. Use sections.
* Have subsections named after specific tables, figures or analyses



## Aim

Nothing local, everything relative: so please do not include hardcoded paths to your computer

* First best: if someone has access to your `.Rmd`/`.qmd` file they can hit render or compile and the whole thing reproduces first time.

*  But: often you need ancillary files for data and code. That's OK but aims should still be that with a self contained folder someone can open a `master.Rmd` file, hit compile and get everything. I usually have an `input` and an `output` subfolder.


Resources and ideas from the [institute for replication](https://i4replication.org/reproducibility.html) [https://i4replication.org/reproducibility.html](https://i4replication.org/reproducibility.html)

