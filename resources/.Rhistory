knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(knitr)
library(jtools)
library(huxtable)
install.packages("huxtable")
library(huxtable)
data <- data.frame(Y = rnorm(10), X = runif(10))
model1 <- lm(Y~1, data = data)
model2 <- lm(Y~X, data = data)
model_summs <- export_summs(model_1, model_2)
model_1 <- lm(Y~1, data = data)
model_2 <- lm(Y~X, data = data)
model_summs <- export_summs(model_1, model_2)
model_summs
library(flextable)
install.packages("flextable")
with(data, plot(X, Y))
? export_summs
? declare_potential_outcomes
library(DeclareDesign)
? declare_potential_outcomes
f <- function(data)  with(data, X^2 + u)
design <-
declare_population(N = 10, X = rnorm(N)m u = rnorm(N)) +
declare_potential_outcomes(Y ~ f()) +
reveal_outcomes()
design <-
declare_population(N = 10, X = rnorm(N), u = rnorm(N)) +
declare_potential_outcomes(Y ~ f()) +
reveal_outcomes()
design <-
declare_population(N = 10, X = rnorm(N), u = rnorm(N)) +
declare_potential_outcomes(Y ~ f()) +
declare_reveal()
design
f <- function(data)  with(data, X^2 + u)
design <-
declare_population(N = 10, X = rnorm(N), u = rnorm(N)) +
declare_potential_outcomes(Y ~ f(.)) +
declare_reveal()
design
f <- "Y ~ X^2 + u"
design <-
declare_population(N = 10, X = rnorm(N), u = rnorm(N)) +
declare_potential_outcomes(as.formula(f)) +
declare_reveal()
design
f <- "Y ~ X^2 + u"
design <-
declare_population(N = 10, X = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(as.formula(f)) +
declare_reveal()
design
f <- "Y ~ X^2 + u"
design <-
declare_population(N = 10, X = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(formula = as.formula(f)) +
declare_reveal()
design
f <- "Y ~ Z^2 + u"
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(formula = as.formula(f)) +
declare_reveal()
design
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(formula = as.formula(f)) +
declare_reveal()
redesign(design, f =  "Y ~ Z - Z^2 + u")
f <- "Y ~ Z^2 + u"
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(formula = as.formula(f)) +
declare_reveal()
design <- redesign(design, f =  "Y ~ Z - Z^2 + u")
design[[2]]
f <- "Y ~ Z^2 + u"
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(formula = as.formula(f)) +
declare_reveal()
design <- redesign(design, f =  list("Y ~ Z - Z^2 + u", "Y ~ 0"))
length(Z)
length(design)
design
design <- redesign(design, f =  list("Y ~ Z - Z^2 + u", "Y ~ 0"))
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(formula = as.formula(f)) +
declare_reveal()
design <- redesign(design, f =  list("Y ~ Z - Z^2 + u", "Y ~ 0"))
draw_data(design[[2]])
draw_data(design[[1]])
draw_data(design[[2]])
design <- redesign(design, f =  list("Y ~ Z - Z^2 + u", "Y ~ 0*Z"))
design[[2]]
f <- "Y ~ Z^2 + u"
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(formula = as.formula(f)) +
declare_reveal()
design_list <- redesign(design, f =  list("Y ~ Z - Z^2 + u", "Y ~ 0*Z"))
design[[2]]
design_list[[2]]
attributes(design_list)
redesign(design, f = "Y~ -10")
redesign(design, f = "Y~ -10")
redesign(design, f = "Y~ X -10")
f <- as.formula("Y ~ Z^2 + u")
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(formula = f) +
declare_reveal()
design
redesign(design, f = as.formula("Y~ X -10"))
design
redesign(design, f = as.formula("Y~ X -10"))
? redeign
? redesign
redesign(design, f = list(as.formula("Y~ X -10")))
a  <- 2
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(Y ~ a*2 + u/10) +
declare_reveal()
redesign(design, a = list(1:2)
)
a  <- 100
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(Y ~ a*2 + u) +
declare_reveal()
redesign(design, a = c(0, 200))
a  <- 100
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)) +
declare_potential_outcomes(Y ~ a*Z + u) +
declare_reveal()
redesign(design, a = c(0, 200))
a  <- 1
design <-
declare_population(N = 10, Z = rep(0:1, 5), u = rnorm(N)/10) +
declare_potential_outcomes(Y ~ a*Z + u) +
declare_reveal()
redesign(design, a = 1:2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DeclareDesign)
library(texreg)
library(flextable)
library(knitr)
library(jtools)
library(huxtable)
library(export_summs)
my_table <- export_summs(model_1, model_2)
