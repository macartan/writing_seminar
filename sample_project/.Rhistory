library(tidyverse)
library(DeclareDesign)
data <- fabricate(N = 100, X = rnorm, Y = X + rnorm)
data <- fabricate(N = 100, X = rnorm(), Y = X + rnorm())
data <- fabricate(N = 100, X = rnorm(N), Y = X + rnorm(N))
data |>
ggplot(aes(X, Y)) + geom_point()
data |>
summarize()
data |>
summarize(`mean Y` = mean(Y))
data |>
summarize(`mean Y` = mean(Y), `mean X` = mean(X), correlation = cor(X, Y))
data |>
summarize(`mean Y` = mean(Y), `mean X` = mean(X), correlation = cor(X, Y)) |>
kable(digits = 2)
? kable
library(knitr)
? kable
? knitr::kable
? knitr::kable
data <- fabricate(N = 100, X = rnorm(N), Y = X + rnorm(N))
write_rds(data, "data/data.rds")
data <- read_rds("data/data.rds")
lm_robust(Y~X, data = read_rds("data/data.rds") )
#| label: tbl-ols
#| echo: true
lm_robust(Y~X, data = read_rds("data/data.rds")) |>
texreg::texreg()
#| label: tbl-ols
#| echo: true
#| results: asis
lm_robust(Y~X, data = read_rds("data/data.rds")) |>
texreg::texreg()
lm_robust(Y~X, data = read_rds("data/data.rds")) |>
modelsummary()
library(modelsummary)
list(
lm_robust(Y~1, data = read_rds("data/data.rds")),
lm_robust(Y~X, data = read_rds("data/data.rds")))|>
modelsummary()
? modelsummary::modelsummary
#| label: tbl-ols
#| echo: true
#| results: asis
list(
lm_robust(Y~1, data = read_rds("data/data.rds")),
lm_robust(Y~X, data = read_rds("data/data.rds")))|>
modelsummary(output = "kableExtra") |>
kable_styling(latex_options = c("HOLD_position"))
library(tidyverse)
library(DeclareDesign)
library(knitr)
library(kableExtra)
library(modelsummary)
#| echo: true
#| fig-cap: "sample figure"
read_rds("data/data.rds") |>
ggplot(aes(X, Y)) + geom_point()
#| label: tbl-simple
#| echo: true
read_rds("data/data.rds") |>
summarize(`mean Y` = mean(Y),
`mean X` = mean(X),
correlation = cor(X, Y)) |>
kable(digits = 2, caption = "A sample table")
#| label: tbl-ols
#| echo: true
#| results: asis
list(
lm_robust(Y~1, data = read_rds("data/data.rds")),
lm_robust(Y~X, data = read_rds("data/data.rds")))|>
modelsummary(output = "kableExtra") |>
kable_styling(latex_options = c("HOLD_position"))
#| label: tbl-ols
#| echo: true
#|
# print nicely
two_models|>
modelsummary(output = "kableExtra") |>
kable_styling(latex_options = c("HOLD_position"))
library(tidyverse)
library(DeclareDesign)
library(knitr)
library(kableExtra)
library(modelsummary)
#| echo: true
#| fig-cap: "sample figure"
read_rds("data/data.rds") |>
ggplot(aes(X, Y)) + geom_point()
#| label: tbl-simple
#| echo: true
read_rds("data/data.rds") |>
summarize(`mean Y` = mean(Y),
`mean X` = mean(X),
correlation = cor(X, Y)) |>
kable(digits = 2, caption = "A sample table")
#| label: analysis
#| echo: true
#|
# generate a list of models
two_models <-
list(
lm_robust(Y~1, data = read_rds("data/data.rds")),
lm_robust(Y~X, data = read_rds("data/data.rds")))
#| label: tbl-ols
#| echo: true
#|
# print nicely
two_models|>
modelsummary(output = "kableExtra") |>
kable_styling(latex_options = c("HOLD_position"))
library(tidyverse)
library(DeclareDesign)
library(knitr)
library(kableExtra)
library(modelsummary)
#| echo: true
#| fig-cap: "sample figure"
read_rds("data/data.rds") |>
ggplot(aes(X, Y)) + geom_point()
#| label: tbl-simple
#| echo: true
read_rds("data/data.rds") |>
summarize(`mean Y` = mean(Y),
`mean X` = mean(X),
correlation = cor(X, Y)) |>
kable(digits = 2, caption = "A sample table")
#| label: analysis
#| echo: true
#|
# generate a list of models
two_models <-
list(
lm_robust(Y~1, data = read_rds("data/data.rds")),
lm_robust(Y~X, data = read_rds("data/data.rds")))
#| label: tbl-ols
#| echo: true
#| results: asis
# print nicely
two_models|>
modelsummary(caption = "some analyses", output = 'kableExtra') %>%
row_spec(2, background = 'lightblue')
#| label: tbl-ols
#| echo: true
#| results: asis
# print nicely
two_models|>
modelsummary(caption = "some analyses", output = 'latex') %>%
row_spec(2, background = 'lightblue')
two_models|>
modelsummary(caption = "some analyses", output = 'latex')
two_models|>
modelsummary(caption = "some analyses", output = 'kableExtra')
two_models|>
modelsummary(note = "some analyses", output = 'kableExtra')
devtools::install_github("crsh/citr")
devtools::install_github("crsh/citr")
knitr::purl("my_paper.qmd")
knitr::spin("my_paper.R")
## ----include = FALSE-----------------------------------------------------------------------------------------------
# devtools::install_github("crsh/citr")
library(tidyverse)
library(DeclareDesign)
library(knitr)
library(kableExtra)
library(modelsummary)
## ----fig-1---------------------------------------------------------------------------------------------------------
#| echo: true
#| fig-cap: "sample figure"
read_rds("data/data.rds") |>
ggplot(aes(X, Y)) + geom_point()
## ------------------------------------------------------------------------------------------------------------------
#| label: tbl-simple
#| echo: true
read_rds("data/data.rds") |>
summarize(`mean Y` = mean(Y),
`mean X` = mean(X),
correlation = cor(X, Y)) |>
kable(digits = 2, caption = "A sample table")
## ----analysis------------------------------------------------------------------------------------------------------
#| label: analysis
#| echo: true
#|
# generate a list of models
two_models <-
list(
lm_robust(Y~1, data = read_rds("data/data.rds")),
lm_robust(Y~X, data = read_rds("data/data.rds")))
## ----tbl-ols-------------------------------------------------------------------------------------------------------
#| label: tbl-ols
#| echo: true
#| results: asis
# print nicely
two_models|>
modelsummary(caption = ": some analyses", note = "some notes")
knitr::spin("my_paper.R")
? knitr::purl
library(knitr)
library(stringr)
extract_code_with_chunks <- function(input_file, output_file) {
# Read the content of the .qmd file
content <- readLines(input_file)
# Initialize a variable to store the extracted code
extracted_code <- character(0)
# Flag to check if we are inside a code chunk
inside_chunk <- FALSE
for (line in content) {
# Detect the start of a code chunk
if (str_detect(line, "^```\\{")) {
inside_chunk <- TRUE
extracted_code <- c(extracted_code, line)
} else if (inside_chunk && str_detect(line, "^```$")) {
# Detect the end of a code chunk
inside_chunk <- FALSE
extracted_code <- c(extracted_code, line, "")
} else if (inside_chunk) {
# Add lines inside code chunks
extracted_code <- c(extracted_code, line)
}
}
# Write the extracted code to the output file
writeLines(extracted_code, output_file)
}
# Example usage
extract_code_with_chunks('my_paper.qmd', 'extracted_code_with_chunks.R')
library(knitr)
library(stringr)
extract_code_with_chunks <- function(input_file, output_file, title = "Document") {
# Read the content of the .qmd file
content <- readLines(input_file)
# Initialize a variable to store the extracted code
extracted_code <- character(0)
# Flag to check if we are inside a code chunk
inside_chunk <- FALSE
for (line in content) {
# Detect the start of a code chunk
if (str_detect(line, "^```\\{")) {
inside_chunk <- TRUE
extracted_code <- c(extracted_code, line)
} else if (inside_chunk && str_detect(line, "^```$")) {
# Detect the end of a code chunk
inside_chunk <- FALSE
extracted_code <- c(extracted_code, line, "")
} else if (inside_chunk) {
# Add lines inside code chunks
extracted_code <- c(extracted_code, line)
}
}
# Create the YAML header
yaml_header <- c(
"---",
paste0("title: \"", title, "\""),
"format: html",
"---",
""
)
# Combine the YAML header with the extracted code
full_content <- c(yaml_header, extracted_code)
# Write the combined content to the output file
writeLines(full_content, output_file)
}
# Example usage
extract_code_with_chunks('my_paper.qmd', 'extracted_code_with_chunks.qmd', title = "My Analysis")
knitr::render("replication.qmd")
rmarkdown::render("replication.qmd")
extract_code_with_chunks('my_paper.qmd', 'replication.qmd', title = "My Analysis")
rmarkdown::render("replication.qmd")
library(knitr)
library(stringr)
extract_code_with_chunks <- function(input_file, output_file, title = "Document") {
# Read the content of the .qmd file
content <- readLines(input_file)
# Initialize a variable to store the extracted code
extracted_code <- character(0)
# Flag to check if we are inside a code chunk
inside_chunk <- FALSE
for (line in content) {
# Detect the start of a code chunk
if (str_detect(line, "^```\\{")) {
inside_chunk <- TRUE
extracted_code <- c(extracted_code, line)
} else if (inside_chunk && str_detect(line, "^```$")) {
# Detect the end of a code chunk
inside_chunk <- FALSE
extracted_code <- c(extracted_code, line, "")
} else if (inside_chunk) {
# Add lines inside code chunks
extracted_code <- c(extracted_code, line)
}
}
# Create the YAML header
yaml_header <- c(
"---",
paste0("title: \"", title, "\""),
"format:",
"   html:",
"     embed-resources: true",
"---",
""
)
# Combine the YAML header with the extracted code
full_content <- c(yaml_header, extracted_code)
# Write the combined content to the output file
writeLines(full_content, output_file)
}
# Example usage
extract_code_with_chunks('my_paper.qmd', 'replication.qmd', title = "My Analysis")
rmarkdown::render("replication.qmd")
